name: ecommerce
networks:
    ecommerce_network:
        driver: bridge
services:
    mongo:
        build:
            dockerfile: .docker/mongo/Dockerfile
        container_name: ecommerce-db
        restart: unless-stopped
        environment:
            MONGO_INITDB_ROOT_USERNAME: $MONGO_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD
        ports:
            - '${MONGO_PORT}:27017'
        command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port $MONGO_PORT
        healthcheck:
            test: echo "
                try { rs.status() }
                catch (err) {
                    rs.initiate({
                        _id:'rs0',
                        members:[
                            { _id:0, host:'127.0.0.1:27017' }
                        ]
                    })
                }" | mongosh --port $MONGO_PORT -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin
            interval: 5s
            timeout: 15s
            start_period: 15s
            retries: 10
        networks:
            - ecommerce_network
        volumes:
            - ecommerce_db:/data/db
    mongo_notification:
        build:
            dockerfile: .docker/mongo/Dockerfile-Notification
        container_name: ecommerce-db-notification
        restart: unless-stopped
        environment:
            MONGO_INITDB_ROOT_USERNAME: $MONGO_NOTIFICATION_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_NOTIFICATION_PASSWORD
        ports:
            - '${MONGO_NOTIFICATION_PORT}:27017'
        command: --replSet rs1 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
        healthcheck:
            test: echo "
                try { rs.status() }
                catch (err) {
                    rs.initiate({
                        _id:'rs1',
                        members:[
                            { _id:0, host:'127.0.0.1:27017' },
                        ]
                    })
                }" | mongosh --port 27017 -u $MONGO_NOTIFICATION_USERNAME -p $MONGO_NOTIFICATION_PASSWORD --authenticationDatabase admin
            interval: 5s
            timeout: 15s
            start_period: 15s
            retries: 10
        networks:
            - ecommerce_network
        volumes:
            - ecommerce_notification_db:/data/db
    mongo_auth:
        build:
            dockerfile: .docker/mongo/Dockerfile
        container_name: ecommerce-db-auth
        restart: unless-stopped
        environment:
            MONGO_INITDB_ROOT_USERNAME: $MONGO_AUTH_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_AUTH_PASSWORD
        ports:
            - '${MONGO_AUTH_PORT}:27017'
        command: --replSet rs2 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
        healthcheck:
            test: echo "
                try { rs.status() }
                catch (err) {
                    rs.initiate({
                        _id:'rs2',
                        members:[
                            { _id:0, host:'127.0.0.1:27017' },
                        ]
                    })
                }" | mongosh --port 27017 -u $MONGO_AUTH_USERNAME -p $MONGO_AUTH_PASSWORD --authenticationDatabase admin
            interval: 5s
            timeout: 15s
            start_period: 15s
            retries: 10
        networks:
            - ecommerce_network
        volumes:
            - ecommerce_auth_db:/data/db
    redis:
        container_name: ecommerce-redis
        image: redis:alpine
        restart: unless-stopped
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis_db:/data
        command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
        networks:
            - ecommerce_network
    kafka:
        container_name: ecommerce-kafka
        image: bitnami/kafka
        restart: unless-stopped
        ports:
            - '9094:9094'
        environment:
            - KAFKA_CFG_NODE_ID=1
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
            - KAFKA_KRAFT_MODE=true
        networks:
            - ecommerce_network
    kafka_ui:
        container_name: ecommerce-kafka-ui
        restart: unless-stopped
        image: provectuslabs/kafka-ui:latest
        ports:
            - 9080:8080
        environment:
            DYNAMIC_CONFIG_ENABLED: true
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        depends_on:
            - kafka
        networks:
            - ecommerce_network
    rabbitmq:
        image: rabbitmq:3-management
        container_name: ecommerce-rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: $RABBITMQ_USERNAME
            RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - ecommerce_network
volumes:
    ecommerce_db:
    redis_db:
    ecommerce_notification_db:
    ecommerce_auth_db:
